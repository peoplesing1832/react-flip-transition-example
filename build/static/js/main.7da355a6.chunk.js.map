{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","state","setState","state3","setState3","list","setList","list2","setList2","list3","setList3","result","i","push","list4","setList4","nextNum","useRef","randomIndex","Math","floor","random","length","className","onClick","name","animation","duration","enter","leave","masterSwitch","prefix","interval","unmount","splice","current","wrapClass","wrap","map","item","key","shuffle","inOutDuration","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7da355a6.chunk.js","sourcesContent":["import React, {\n  useState,\n  useRef,\n} from 'react';\nimport './App.css';\nimport {\n  Transition,\n  Observer,\n  Transitions,\n  Flip,\n  Flips,\n} from 'react-flip-transition';\nimport { shuffle } from 'lodash'\n\nfunction App() {\n  const [state, setState] = useState(true);\n  const [state3, setState3] = useState(true);\n  const [list, setList] = useState([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n  const [list2, setList2] = useState([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n  const [list3, setList3] = useState([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n  const [list4, setList4] = useState(() => {\n    const result = [];\n    for (let i = 1; i <= 81; i++) {\n      result.push(i);\n    }\n    return result;\n  });\n  const nextNum = useRef(10);\n\n  const randomIndex = () => {\n    return Math.floor(Math.random() * list.length);\n  };\n\n  const str1css =\n`\n.fade-leaveed {\n  opacity: 0;\n  transform: translateX(10px);\n}\n.fade-leaveing {\n  opacity: 0;\n  transform: translateX(50px);\n  transition: all 600ms ease-in;\n}\n.fade-entering {\n  opacity: 1;\n  transition: all 200ms;\n}\n`;\n\n  const str1js =\n`\nimport { Transition } from 'react-flip-transition';\n\nconst [state, setState] = useState(true);\n\n<button\n  onClick={() => setState(!state)}\n  className=\"doc-button\"\n>\n  toggle\n</button>\n\n<Transition\n  name=\"fade\"\n  animation={state}\n  duration={{enter: 200, leave: 600, }}\n>\n  <div>hello world</div>\n</Transition>\n`\n  const str2css =\n`\n.fade-leaveed {\n  opacity: 0;\n  transform: translateX(10px);\n}\n.fade-leaveing {\n  opacity: 0;\n  transform: translateX(50px);\n  transition: all 600ms ease-in;\n}\n.fade-entering {\n  opacity: 1;\n  transition: all 200ms;\n}\n`;\n  const str2js =\n`\nimport { Transition, Transitions } from 'react-flip-transition'\n\nconst [state3, setState3] = useState(true);\n\n<button\n  onClick={() => setState3(!state3)}\n  className=\"doc-button\"\n>\n  toggle\n</button>\n\n<Transitions\n  masterSwitch={state3}\n  prefix=\"fade\"\n  interval={300}\n>\n  <ul>\n    <Transition unmount>\n      <li className=\"flip1-list-item\">1</li>\n    </Transition>\n    <Transition unmount>\n      <li className=\"flip1-list-item\">2</li>\n    </Transition>\n    <Transition unmount>\n      <li className=\"flip1-list-item\">3</li>\n    </Transition>\n    <Transition unmount>\n      <li className=\"flip1-list-item\">4</li>\n    </Transition>\n    <Transition unmount>\n      <li className=\"flip1-list-item\">5</li>\n    </Transition>\n    <Transition unmount>\n      <li className=\"flip1-list-item\">6</li>\n    </Transition>\n  </ul>\n</Transitions>\n`;\n\n  const str3css =\n`\n.observer-list {\n  display: flex;\n  justify-content: flex-start;\n  align-items: flex-start;\n}\n.observer-list-item {\n  margin-right: 10px;\n}\n.observer-leaveed {\n  opacity: 0;\n  transform: translateY(50px);\n}\n.observer-leaveing {\n  opacity: 0;\n  transform: translateY(50px);\n  transition: all 1s;\n}\n.observer-entering {\n  opacity: 1;\n  transition: all 1s;\n}\n`;\n\n  const str3js =\n`\nimport { Transition, Observer } from 'react-flip-transition';\n\nconst [list, setList] = useState([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n\n<Observer\n  wrapClass=\"observer-list\"\n  wrap=\"div\"\n>\n  {\n    list && list.map((item) => {\n      return (\n        <Transition\n          key={item}\n          name=\"observer\"\n          duration={1000}\n        >\n          <div className=\"observer-list-item\">{ item }</div>\n        </Transition>\n      )\n    })\n  }\n</Observer>\n`;\n\n  const str4css =\n`\n.flip1-list-item {\n  padding: 6px 0;\n}\n.flip1-move {\n  transition: all 1s;\n}\n`;\n\n  const str4js =\n`\nimport { Flip, Flips, } from 'react-flip-transition';\n\nconst [list2, setList2] = useState([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n\n<Flips\n  name=\"flip1\"\n  wrap=\"ul\"\n>\n  {\n    list2 && list2.map((item) => {\n      return (\n        <Flip key={item}>\n          <li className=\"flip1-list-item\">{ item }</li>\n        </Flip>\n      );\n    })\n  }\n</Flips>\n`;\n\n  const str5css =\n`\n.flip2-leaveed {\n  opacity: 0;\n  transform: translateY(50px);\n}\n.flip2-leaveing {\n  opacity: 0;\n  transform: translateY(50px);\n  transition: all 1s;\n}\n.flip2-entering {\n  opacity: 1;\n  transition: all 1s;\n}\n.flip2-move {\n  transition: all 1s;\n}\n`;\n\n  const str5js =\n`\nimport { Flip, Flips, } from 'react-flip-transition';\n\nconst [list3, setList3] = useState([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n\n<Flips\n  wrapClass=\"observer-list\"\n  wrap=\"div\"\n  name=\"flip2\"\n  inOutDuration={1000}\n>\n  {\n    list3 && list3.map((item) => {\n      return (\n        <Flip\n          key={item}\n        >\n          <div className=\"observer-list-item\">{ item }</div>\n        </Flip>\n      )\n    })\n  }\n</Flips>\n`;\n\n  const str6css =\n`\n.matrix {\n  display: flex;\n  justify-content: flex-start;\n  align-items: flex-start;\n  flex-wrap: wrap;\n  width: 234px;\n  height: 234px;\n}\n.matrix-item {\n  width: 26px;\n  height: 26px;\n  box-sizing: border-box;\n  line-height: 24px;\n  border: 1px solid #eee;\n  text-align: center;\n}\n.matrix-move {\n  transition: all 1s;\n}\n`;\n\n  const str6js =\n`\nimport { Flip, Flips, } from 'react-flip-transition';\n\nconst [list4, setList4] = useState(() => {\n  const result = [];\n  for (let i = 1; i <= 81; i++) {\n    result.push(i);\n  }\n  return result;\n});\n\n<Flips\n  wrapClass=\"matrix\"\n  wrap=\"div\"\n  name=\"matrix\"\n>\n  {\n    list4 && list4.map((item) => {\n      return (\n        <Flip\n          key={item}\n        >\n          <div className=\"matrix-item\">{ item }</div>\n        </Flip>\n      )\n    })\n  }\n</Flips>\n`;\n\n  return (\n    <div className=\"App\">\n      <h3 className=\"doc-title\">最简单的过渡</h3>\n      <code>{ str1css }</code>\n      <code>{ str1js }</code>\n      <button\n        onClick={() => setState(!state)}\n        className=\"doc-button\"\n      >\n        toggle\n      </button>\n      <Transition\n        name=\"fade\"\n        animation={state}\n        duration={{\n          enter: 200,\n          leave: 600,\n        }}\n      >\n        <div>hello world</div>\n      </Transition>\n      <h3 className=\"doc-title\">多个元素过渡</h3>\n      <code>{ str2css }</code>\n      <code>{ str2js }</code>\n      <button\n        onClick={() => setState3(!state3)}\n        className=\"doc-button\"\n      >\n        toggle\n      </button>\n      <Transitions\n        masterSwitch={state3}\n        prefix=\"fade\"\n        interval={300}\n      >\n        <ul>\n          <Transition unmount>\n            <li className=\"flip1-list-item\">1</li>\n          </Transition>\n          <Transition unmount>\n            <li className=\"flip1-list-item\">2</li>\n          </Transition>\n          <Transition unmount>\n            <li className=\"flip1-list-item\">3</li>\n          </Transition>\n          <Transition unmount>\n            <li className=\"flip1-list-item\">4</li>\n          </Transition>\n          <Transition unmount>\n            <li className=\"flip1-list-item\">5</li>\n          </Transition>\n          <Transition unmount>\n            <li className=\"flip1-list-item\">6</li>\n          </Transition>\n        </ul>\n      </Transitions>\n      <h3 className=\"doc-title\">列表过渡</h3>\n      <code>{ str3css }</code>\n      <code>{ str3js }</code>\n      <button\n        className=\"doc-button\"\n        onClick={() => {\n          list.splice(randomIndex(), 0, nextNum.current++)\n          setList([...list]);\n        }}\n      >\n        Add\n      </button>\n      <button\n        className=\"doc-button\"\n        onClick={() => {\n          list.splice(randomIndex(), 1);\n          setList([...list]);\n        }}\n      >\n        Remove\n      </button>\n      <Observer\n        wrapClass=\"observer-list\"\n        wrap=\"div\"\n      >\n        {\n          list && list.map((item) => {\n            return (\n              <Transition\n                key={item}\n                name=\"observer\"\n                duration={1000}\n              >\n                <div className=\"observer-list-item\">{ item }</div>\n              </Transition>\n            )\n          })\n        }\n      </Observer>\n      <h3 className=\"doc-title\">排序过渡</h3>\n      <code>{ str4css }</code>\n      <code>{ str4js }</code>\n      <button\n        className=\"doc-button\"\n        onClick={() => {\n          setList2(shuffle(list2));\n        }}\n      >\n        Shuffle\n      </button>\n      <Flips\n        name=\"flip1\"\n        wrap=\"ul\"\n      >\n        {\n          list2 && list2.map((item) => {\n            return (\n              <Flip key={item}>\n                <li className=\"flip1-list-item\">{ item }</li>\n              </Flip>\n            );\n          })\n        }\n      </Flips>\n      <h3 className=\"doc-title\">排序过渡中添加与删除</h3>\n      <code>{ str5css }</code>\n      <code>{ str5js }</code>\n      <button\n        className=\"doc-button\"\n        onClick={() => {\n          setList3(shuffle(list3));\n        }}\n      >\n        Shuffle\n      </button>\n      <button\n        className=\"doc-button\"\n        onClick={() => {\n          list3.splice(randomIndex(), 0, nextNum.current++)\n          setList3([...list3]);\n        }}\n      >\n        Add\n      </button>\n      <button\n        className=\"doc-button\"\n        onClick={() => {\n          list3.splice(randomIndex(), 1);\n          setList3([...list3]);\n        }}\n      >\n        Remove\n      </button>\n      <Flips\n        wrapClass=\"observer-list\"\n        wrap=\"div\"\n        name=\"flip2\"\n        inOutDuration={1000}\n      >\n        {\n          list3 && list3.map((item) => {\n            return (\n              <Flip\n                key={item}\n              >\n                <div className=\"observer-list-item\">{ item }</div>\n              </Flip>\n            )\n          })\n        }\n      </Flips>\n      <h3 className=\"doc-title\">排序过渡和多维表格</h3>\n      <code>{ str6css }</code>\n      <code>{ str6js }</code>\n      <button\n        className=\"doc-button\"\n        onClick={() => {\n          setList4(shuffle(list4));\n        }}\n      >\n        Shuffle\n      </button>\n      <Flips\n        wrapClass=\"matrix\"\n        wrap=\"div\"\n        name=\"matrix\"\n      >\n        {\n          list4 && list4.map((item) => {\n            return (\n              <Flip\n                key={item}\n              >\n                <div className=\"matrix-item\">{ item }</div>\n              </Flip>\n            )\n          })\n        }\n      </Flips>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}